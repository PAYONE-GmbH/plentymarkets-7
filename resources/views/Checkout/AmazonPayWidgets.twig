<script type="text/javascript">
    $(document).ready(function () {
        window.onAmazonLoginReady = function () {
            amazon.Login.setClientId('{{ content.clientId }}');
        };

        var $orderReferenceId;
        addressBookWidget = new OffAmazonPayments.Widgets.AddressBook({
            sellerId: '{{ content.sellerId }}',
            scope: '{{ content.addressBookScope }}',
            onOrderReferenceCreate: function (orderReference) {
                // Here is where you can grab the Order Reference ID.
                console.log("AmazonOrderReference: " + orderReference.getAmazonOrderReferenceId());
                $orderReferenceId = orderReference.getAmazonOrderReferenceId();
            },
            onAddressSelect: function (orderReference) {
                // Replace the following code with the action that you want
                // to perform after the address is selected. The
                // amazonOrderReferenceId can be used to retrieve the address
                // details by calling the GetOrderReferenceDetails operation.
                console.log("After Event: AccessToken= {{ accessToken }}");
                console.log("After Event: workOrderId= {{ workOrderId }}");
                console.log("After Event: orderReferenceId= " + $orderReferenceId);

                $.post("/payment/payone/checkout/amazonPay/getOrderReference",
                    {
                        "accessToken": "{{ accessToken }}",
                        "workOrderId": "{{ workOrderId }}",
                        "amazonReferenceId": $orderReferenceId
                    },
                    function (response) {
                        if (response.hasOwnProperty('events')) {
                            if (response.events.hasOwnProperty('CheckoutChanged')) {
                                if (response.events.CheckoutChanged.hasOwnProperty('AmazonPayAddress')) {
                                    console.log(response.events.CheckoutChanged.AmazonPayAddress);
                                    if (response.events.CheckoutChanged.AmazonPayAddress.hasOwnProperty('changed')) {
                                        if (response.events.CheckoutChanged.AmazonPayAddress.changed) {
                                            if (response.events.CheckoutChanged.AmazonPayAddress.changed.hasOwnProperty('billingAddress')) {
                                                window.ceresStore.dispatch("createAddress", {
                                                    address: response.events.CheckoutChanged.AmazonPayAddress.billingAddress,
                                                    addressType: "1"
                                                });
                                            }
                                            if (response.events.CheckoutChanged.AmazonPayAddress.changed.hasOwnProperty('shippingAddress')) {
                                                window.ceresStore.dispatch("createAddress", {
                                                    address: response.events.CheckoutChanged.AmazonPayAddress.shippingAddress,
                                                    addressType: "2"
                                                });
                                            }
                                            // window.function("amazonPay()");
                                            amazonPay()
                                        }
                                    }
                                }
                            }
                        }
                    });

                // If rendering the AddressBook and Wallet widgets
                // on the same page, you do not have to provide any additional
                // logic to load the Wallet widget after the AddressBook widget.
                // The Wallet widget will re-render itself on all subsequent
                // onAddressSelect events, without any action from you.
                // We don't recommend that you explicitly refresh it.
            },
            design: {
                designMode: 'responsive'
            },
            onReady: function (orderReference) {
                // Enter code here you want to be executed
                // when the AddressBook widget has been rendered.
            },
            onError: function (error) {
                console.log(error.getErrorCode() + ': ' + error.getErrorMessage());
            }
        });
        addressBookWidget.bind("addressBookWidgetDiv");


        walletWidget = new OffAmazonPayments.Widgets.Wallet({
            sellerId: '{{ content.sellerId }}',
            scope: '{{ content.walletScope }}',
            onPaymentSelect: function (orderReference) {
                // Replace this code with the action that you want to perform
                // after the payment method is selected.

                // Ideally this would enable the next action for the buyer
                // including either a "Continue" or "Place Order" button.
            },
            design: {
                designMode: 'responsive'
            },
            onError: function (error) {
                // Your error handling code.
                // During development you can use the following
                // code to view error messages:
                console.log(error.getErrorCode() + ': ' + error.getErrorMessage());
            }
        });
        walletWidget.setPresentmentCurrency('{{ content.currency }}'); // ISO-4217 currency code, merchant is expected to enter a valid currency supported by Amazon Pay.
        walletWidget.bind("walletWidgetDiv");
    });
</script>
